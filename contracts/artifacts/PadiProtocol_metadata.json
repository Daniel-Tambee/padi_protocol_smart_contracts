{
	"compiler": {
		"version": "0.8.26+commit.8a97fa7a"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_storage",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_paymentToken",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_padiWallet",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_nftPrice",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "sender",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					}
				],
				"name": "ERC721IncorrectOwner",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "operator",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "ERC721InsufficientApproval",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "approver",
						"type": "address"
					}
				],
				"name": "ERC721InvalidApprover",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "operator",
						"type": "address"
					}
				],
				"name": "ERC721InvalidOperator",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					}
				],
				"name": "ERC721InvalidOwner",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "receiver",
						"type": "address"
					}
				],
				"name": "ERC721InvalidReceiver",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "sender",
						"type": "address"
					}
				],
				"name": "ERC721InvalidSender",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "ERC721NonexistentToken",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					}
				],
				"name": "OwnableInvalidOwner",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "OwnableUnauthorizedAccount",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "token",
						"type": "address"
					}
				],
				"name": "SafeERC20FailedOperation",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "approved",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "Approval",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "operator",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "bool",
						"name": "approved",
						"type": "bool"
					}
				],
				"name": "ApprovalForAll",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "lawyerAddress",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "caseId",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "memberAddress",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "bool",
						"name": "isEmergency",
						"type": "bool"
					}
				],
				"name": "CaseAdded",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "lawyerAddress",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "caseId",
						"type": "uint256"
					}
				],
				"name": "CaseResolved",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "incidentId",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "corroborator",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "timestamp",
						"type": "uint256"
					}
				],
				"name": "CorroborationAdded",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "lawyerAddress",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "caseId",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "memberAddress",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "timestamp",
						"type": "uint256"
					}
				],
				"name": "EmergencyResponseConfirmed",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "incidentId",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "reporter",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "timestamp",
						"type": "uint256"
					}
				],
				"name": "IncidentReported",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "incidentId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint8",
						"name": "status",
						"type": "uint8"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "verifier",
						"type": "address"
					}
				],
				"name": "IncidentStatusUpdated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "lawyerAddress",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "rewardAmount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "caseId",
						"type": "uint256"
					}
				],
				"name": "LawyerRewarded",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "lawyerAddress",
						"type": "address"
					}
				],
				"name": "LawyerSignedUp",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "memberAddress",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "MembershipNFTMinted",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "tokenAddress",
						"type": "address"
					}
				],
				"name": "PaymentTokenUpdated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "memberAddress",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "representativeAddress",
						"type": "address"
					}
				],
				"name": "RepresentativeAssigned",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "Transfer",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "lawyerAddress",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "memberAddress",
						"type": "address"
					},
					{
						"internalType": "string",
						"name": "descriptionMetadata",
						"type": "string"
					},
					{
						"internalType": "uint256",
						"name": "rewardAmount",
						"type": "uint256"
					},
					{
						"internalType": "bool",
						"name": "isEmergency",
						"type": "bool"
					}
				],
				"name": "addCase",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "incidentId",
						"type": "uint256"
					},
					{
						"internalType": "string",
						"name": "comment",
						"type": "string"
					},
					{
						"internalType": "string[]",
						"name": "mediaURIs",
						"type": "string[]"
					}
				],
				"name": "addCorroboration",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "approve",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "member",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "representative",
						"type": "address"
					}
				],
				"name": "assignRepresentative",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					}
				],
				"name": "balanceOf",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "memberAddress",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "caseId",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "lawyerAddress",
						"type": "address"
					}
				],
				"name": "confirmEmergencyResponse",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "getApproved",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "lawyer",
						"type": "address"
					}
				],
				"name": "getOpenCases",
				"outputs": [
					{
						"internalType": "uint256[]",
						"name": "",
						"type": "uint256[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "member",
						"type": "address"
					}
				],
				"name": "getRepresentative",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "operator",
						"type": "address"
					}
				],
				"name": "isApprovedForAll",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "lawyerAddress",
						"type": "address"
					}
				],
				"name": "isLawyer",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "memberAddress",
						"type": "address"
					}
				],
				"name": "isMember",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "member",
						"type": "address"
					},
					{
						"internalType": "string",
						"name": "metadataURI",
						"type": "string"
					},
					{
						"internalType": "uint256",
						"name": "paymentAmount",
						"type": "uint256"
					}
				],
				"name": "mintMembershipNFT",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "name",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "nftPrice",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "ownerOf",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "padiWallet",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "paymentToken",
				"outputs": [
					{
						"internalType": "contract IERC20",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "lawyer",
						"type": "address"
					},
					{
						"internalType": "string",
						"name": "profileURI",
						"type": "string"
					}
				],
				"name": "registerLawyer",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "descriptionMetadata",
						"type": "string"
					},
					{
						"internalType": "string[]",
						"name": "mediaURIs",
						"type": "string[]"
					}
				],
				"name": "reportIncident",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "incidentId",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "lawyerAddress",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "caseId",
						"type": "uint256"
					}
				],
				"name": "resolveCase",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "lawyerAddress",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "caseId",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "rewardAmount",
						"type": "uint256"
					}
				],
				"name": "rewardLawyerForEmergency",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "safeTransferFrom",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "safeTransferFrom",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "operator",
						"type": "address"
					},
					{
						"internalType": "bool",
						"name": "approved",
						"type": "bool"
					}
				],
				"name": "setApprovalForAll",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "token",
						"type": "address"
					}
				],
				"name": "setPaymentToken",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "lawyer",
						"type": "address"
					},
					{
						"internalType": "string",
						"name": "profileURI",
						"type": "string"
					}
				],
				"name": "signUpLawyer",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "storageContract",
				"outputs": [
					{
						"internalType": "contract IPadiStorage",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes4",
						"name": "interfaceId",
						"type": "bytes4"
					}
				],
				"name": "supportsInterface",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "symbol",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "tokenURI",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "transferFrom",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "incidentId",
						"type": "uint256"
					},
					{
						"internalType": "uint8",
						"name": "status",
						"type": "uint8"
					}
				],
				"name": "updateIncidentStatus",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"errors": {
				"ERC721IncorrectOwner(address,uint256,address)": [
					{
						"details": "Indicates an error related to the ownership over a particular token. Used in transfers.",
						"params": {
							"owner": "Address of the current owner of a token.",
							"sender": "Address whose tokens are being transferred.",
							"tokenId": "Identifier number of a token."
						}
					}
				],
				"ERC721InsufficientApproval(address,uint256)": [
					{
						"details": "Indicates a failure with the `operator`’s approval. Used in transfers.",
						"params": {
							"operator": "Address that may be allowed to operate on tokens without being their owner.",
							"tokenId": "Identifier number of a token."
						}
					}
				],
				"ERC721InvalidApprover(address)": [
					{
						"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
						"params": {
							"approver": "Address initiating an approval operation."
						}
					}
				],
				"ERC721InvalidOperator(address)": [
					{
						"details": "Indicates a failure with the `operator` to be approved. Used in approvals.",
						"params": {
							"operator": "Address that may be allowed to operate on tokens without being their owner."
						}
					}
				],
				"ERC721InvalidOwner(address)": [
					{
						"details": "Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20. Used in balance queries.",
						"params": {
							"owner": "Address of the current owner of a token."
						}
					}
				],
				"ERC721InvalidReceiver(address)": [
					{
						"details": "Indicates a failure with the token `receiver`. Used in transfers.",
						"params": {
							"receiver": "Address to which tokens are being transferred."
						}
					}
				],
				"ERC721InvalidSender(address)": [
					{
						"details": "Indicates a failure with the token `sender`. Used in transfers.",
						"params": {
							"sender": "Address whose tokens are being transferred."
						}
					}
				],
				"ERC721NonexistentToken(uint256)": [
					{
						"details": "Indicates a `tokenId` whose `owner` is the zero address.",
						"params": {
							"tokenId": "Identifier number of a token."
						}
					}
				],
				"OwnableInvalidOwner(address)": [
					{
						"details": "The owner is not a valid owner account. (eg. `address(0)`)"
					}
				],
				"OwnableUnauthorizedAccount(address)": [
					{
						"details": "The caller account is not authorized to perform an operation."
					}
				],
				"SafeERC20FailedOperation(address)": [
					{
						"details": "An operation with an ERC-20 token failed."
					}
				]
			},
			"events": {
				"Approval(address,address,uint256)": {
					"details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
				},
				"ApprovalForAll(address,address,bool)": {
					"details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
				},
				"CaseAdded(address,uint256,address,bool)": {
					"params": {
						"caseId": "The unique identifier for the case.",
						"lawyerAddress": "The address of the lawyer handling the case.",
						"memberAddress": "The address of the member involved in the case."
					}
				},
				"CaseResolved(address,uint256)": {
					"params": {
						"caseId": "The unique identifier for the case.",
						"lawyerAddress": "The address of the lawyer handling the case."
					}
				},
				"CorroborationAdded(uint256,address,uint256)": {
					"params": {
						"corroborator": "The address of the member adding the corroboration.",
						"incidentId": "The unique identifier for the incident.",
						"timestamp": "The time when the corroboration was added."
					}
				},
				"EmergencyResponseConfirmed(address,uint256,address,uint256)": {
					"params": {
						"caseId": "The unique identifier for the case.",
						"lawyerAddress": "The address of the lawyer responding to the emergency.",
						"memberAddress": "The address of the member involved.",
						"timestamp": "The time when the response was confirmed."
					}
				},
				"IncidentReported(uint256,address,uint256)": {
					"params": {
						"incidentId": "The unique identifier for the incident.",
						"reporter": "The address of the member reporting the incident.",
						"timestamp": "The time when the incident was reported."
					}
				},
				"IncidentStatusUpdated(uint256,uint8,address)": {
					"params": {
						"incidentId": "The unique identifier for the incident.",
						"status": "The new verification status (0: Unverified, 1: Verified, 2: Rejected).",
						"verifier": "The address of the entity that updated the status."
					}
				},
				"LawyerRewarded(address,uint256,uint256)": {
					"params": {
						"caseId": "The unique identifier for the case.",
						"lawyerAddress": "The address of the lawyer receiving the reward.",
						"rewardAmount": "The amount of reward given to the lawyer."
					}
				},
				"LawyerSignedUp(address)": {
					"params": {
						"lawyerAddress": "The address of the lawyer signing up."
					}
				},
				"MembershipNFTMinted(address,uint256)": {
					"params": {
						"memberAddress": "The address of the new member.",
						"tokenId": "The ID of the minted NFT."
					}
				},
				"PaymentTokenUpdated(address)": {
					"params": {
						"tokenAddress": "The new token contract address."
					}
				},
				"RepresentativeAssigned(address,address)": {
					"params": {
						"memberAddress": "The address of the member.",
						"representativeAddress": "The address of the legal representative."
					}
				},
				"Transfer(address,address,uint256)": {
					"details": "Emitted when `tokenId` token is transferred from `from` to `to`."
				}
			},
			"kind": "dev",
			"methods": {
				"addCase(address,address,string,uint256,bool)": {
					"params": {
						"descriptionMetadata": "A URI describing the case.",
						"lawyerAddress": "The address of the lawyer handling the case.",
						"memberAddress": "The address of the member involved in the case.",
						"rewardAmount": "The reward amount associated with the case."
					}
				},
				"addCorroboration(uint256,string,string[])": {
					"params": {
						"comment": "A comment providing additional context.",
						"incidentId": "The unique identifier for the incident.",
						"mediaURIs": "An array of URIs pointing to supplementary evidence."
					}
				},
				"approve(address,uint256)": {
					"details": "See {IERC721-approve}."
				},
				"balanceOf(address)": {
					"details": "See {IERC721-balanceOf}."
				},
				"confirmEmergencyResponse(address,uint256,address)": {
					"params": {
						"caseId": "The unique identifier for the case.",
						"lawyerAddress": "The address of the lawyer (Padi) responding to the emergency.",
						"memberAddress": "The address of the member calling for help."
					}
				},
				"getApproved(uint256)": {
					"details": "See {IERC721-getApproved}."
				},
				"isApprovedForAll(address,address)": {
					"details": "See {IERC721-isApprovedForAll}."
				},
				"isLawyer(address)": {
					"params": {
						"lawyerAddress": "The address to check."
					},
					"returns": {
						"_0": "True if the address is a registered lawyer."
					}
				},
				"isMember(address)": {
					"params": {
						"memberAddress": "The address to check."
					},
					"returns": {
						"_0": "True if the address is a verified member."
					}
				},
				"name()": {
					"details": "See {IERC721Metadata-name}."
				},
				"owner()": {
					"details": "Returns the address of the current owner."
				},
				"ownerOf(uint256)": {
					"details": "See {IERC721-ownerOf}."
				},
				"renounceOwnership()": {
					"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
				},
				"reportIncident(string,string[])": {
					"params": {
						"descriptionMetadata": "A URI with details about the incident.",
						"mediaURIs": "An array of URIs pointing to evidence (e.g., images, videos)."
					},
					"returns": {
						"incidentId": "The unique identifier for the reported incident."
					}
				},
				"resolveCase(address,uint256)": {
					"params": {
						"caseId": "The unique identifier for the case.",
						"lawyerAddress": "The address of the lawyer handling the case."
					}
				},
				"rewardLawyerForEmergency(address,uint256,uint256)": {
					"params": {
						"caseId": "The unique identifier for the case.",
						"lawyerAddress": "The address of the lawyer (Padi).",
						"rewardAmount": "The amount of tokens to reward the lawyer."
					}
				},
				"safeTransferFrom(address,address,uint256)": {
					"details": "See {IERC721-safeTransferFrom}."
				},
				"safeTransferFrom(address,address,uint256,bytes)": {
					"details": "See {IERC721-safeTransferFrom}."
				},
				"setApprovalForAll(address,bool)": {
					"details": "See {IERC721-setApprovalForAll}."
				},
				"supportsInterface(bytes4)": {
					"details": "See {IERC165-supportsInterface}."
				},
				"symbol()": {
					"details": "See {IERC721Metadata-symbol}."
				},
				"tokenURI(uint256)": {
					"details": "See {IERC721Metadata-tokenURI}."
				},
				"transferFrom(address,address,uint256)": {
					"details": "See {IERC721-transferFrom}."
				},
				"transferOwnership(address)": {
					"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
				},
				"updateIncidentStatus(uint256,uint8)": {
					"params": {
						"incidentId": "The unique identifier for the incident.",
						"status": "The new verification status (0: Unverified, 1: Verified, 2: Rejected)."
					}
				}
			},
			"version": 1
		},
		"userdoc": {
			"events": {
				"CaseAdded(address,uint256,address,bool)": {
					"notice": "Event emitted when a new case is added for a lawyer."
				},
				"CaseResolved(address,uint256)": {
					"notice": "Event emitted when a case is resolved for a lawyer."
				},
				"CorroborationAdded(uint256,address,uint256)": {
					"notice": "Event emitted when a corroboration is added to an incident."
				},
				"EmergencyResponseConfirmed(address,uint256,address,uint256)": {
					"notice": "Event emitted when an emergency response is confirmed by a lawyer."
				},
				"IncidentReported(uint256,address,uint256)": {
					"notice": "Event emitted when a new incident is reported."
				},
				"IncidentStatusUpdated(uint256,uint8,address)": {
					"notice": "Event emitted when an incident's verification status is updated."
				},
				"LawyerRewarded(address,uint256,uint256)": {
					"notice": "Event emitted when a lawyer is rewarded after confirming an emergency response."
				},
				"LawyerSignedUp(address)": {
					"notice": "Event emitted when a lawyer signs up as a legal representative."
				},
				"MembershipNFTMinted(address,uint256)": {
					"notice": "Event emitted when a membership NFT is minted."
				},
				"PaymentTokenUpdated(address)": {
					"notice": "Event emitted when the payment token is updated."
				},
				"RepresentativeAssigned(address,address)": {
					"notice": "Event emitted when a legal representative is assigned to a member."
				}
			},
			"kind": "user",
			"methods": {
				"addCase(address,address,string,uint256,bool)": {
					"notice": "Track a new case for a lawyer."
				},
				"addCorroboration(uint256,string,string[])": {
					"notice": "Add a corroboration (supporting evidence) to an existing incident."
				},
				"confirmEmergencyResponse(address,uint256,address)": {
					"notice": "Confirm that a lawyer (Padi) has responded to an emergency call from a member."
				},
				"isLawyer(address)": {
					"notice": "Check if an address is a registered lawyer."
				},
				"isMember(address)": {
					"notice": "Check if an address is a verified member."
				},
				"reportIncident(string,string[])": {
					"notice": "Report a new incident of abuse or misconduct."
				},
				"resolveCase(address,uint256)": {
					"notice": "Mark a case as resolved for a lawyer."
				},
				"rewardLawyerForEmergency(address,uint256,uint256)": {
					"notice": "Reward a lawyer (Padi) after confirming their response to an emergency."
				},
				"updateIncidentStatus(uint256,uint8)": {
					"notice": "Update the verification status of an incident."
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/PadiProtocol_flattened.sol": "PadiProtocol"
		},
		"evmVersion": "cancun",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"contracts/PadiProtocol_flattened.sol": {
			"keccak256": "0x3a19bde24a0013d2448a8ceece3ba486d48449ca310946e9492124f35adaece9",
			"urls": [
				"bzz-raw://7cef81bf53f11215a3f7118d9f3cb428d00349de9aa137132cbfaf31cffd3ef7",
				"dweb:/ipfs/QmPzKL1Xyw84tDRv6yAGWoNguMSjCVkTm3ZCFtv1BHU2GV"
			]
		}
	},
	"version": 1
}